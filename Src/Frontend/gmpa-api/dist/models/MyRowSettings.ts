/* tslint:disable */
/* eslint-disable */
/**
 * GMPA - API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { Alignment } from './Alignment';
import {
    AlignmentFromJSON,
    AlignmentFromJSONTyped,
    AlignmentToJSON,
} from './Alignment';
import type { MyBackgroundSettings } from './MyBackgroundSettings';
import {
    MyBackgroundSettingsFromJSON,
    MyBackgroundSettingsFromJSONTyped,
    MyBackgroundSettingsToJSON,
} from './MyBackgroundSettings';
import type { Padding } from './Padding';
import {
    PaddingFromJSON,
    PaddingFromJSONTyped,
    PaddingToJSON,
} from './Padding';

/**
 * 
 * @export
 * @interface MyRowSettings
 */
export interface MyRowSettings {
    /**
     * 
     * @type {MyBackgroundSettings}
     * @memberof MyRowSettings
     */
    background?: MyBackgroundSettings;
    /**
     * 
     * @type {string}
     * @memberof MyRowSettings
     */
    textColor?: string | null;
    /**
     * 
     * @type {Array<string>}
     * @memberof MyRowSettings
     */
    cssClasses?: Array<string> | null;
    /**
     * 
     * @type {boolean}
     * @memberof MyRowSettings
     */
    isFullWidth?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof MyRowSettings
     */
    isFullHeight?: boolean;
    /**
     * 
     * @type {string}
     * @memberof MyRowSettings
     */
    anchor?: string | null;
    /**
     * 
     * @type {Alignment}
     * @memberof MyRowSettings
     */
    horizontalAlignment?: Alignment;
    /**
     * 
     * @type {Alignment}
     * @memberof MyRowSettings
     */
    verticalAlignment?: Alignment;
    /**
     * 
     * @type {Padding}
     * @memberof MyRowSettings
     */
    paddingTop?: Padding;
    /**
     * 
     * @type {Padding}
     * @memberof MyRowSettings
     */
    paddingBottom?: Padding;
}

/**
 * Check if a given object implements the MyRowSettings interface.
 */
export function instanceOfMyRowSettings(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function MyRowSettingsFromJSON(json: any): MyRowSettings {
    return MyRowSettingsFromJSONTyped(json, false);
}

export function MyRowSettingsFromJSONTyped(json: any, ignoreDiscriminator: boolean): MyRowSettings {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'background': !exists(json, 'background') ? undefined : MyBackgroundSettingsFromJSON(json['background']),
        'textColor': !exists(json, 'textColor') ? undefined : json['textColor'],
        'cssClasses': !exists(json, 'cssClasses') ? undefined : json['cssClasses'],
        'isFullWidth': !exists(json, 'isFullWidth') ? undefined : json['isFullWidth'],
        'isFullHeight': !exists(json, 'isFullHeight') ? undefined : json['isFullHeight'],
        'anchor': !exists(json, 'anchor') ? undefined : json['anchor'],
        'horizontalAlignment': !exists(json, 'horizontalAlignment') ? undefined : AlignmentFromJSON(json['horizontalAlignment']),
        'verticalAlignment': !exists(json, 'verticalAlignment') ? undefined : AlignmentFromJSON(json['verticalAlignment']),
        'paddingTop': !exists(json, 'paddingTop') ? undefined : PaddingFromJSON(json['paddingTop']),
        'paddingBottom': !exists(json, 'paddingBottom') ? undefined : PaddingFromJSON(json['paddingBottom']),
    };
}

export function MyRowSettingsToJSON(value?: MyRowSettings | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'background': MyBackgroundSettingsToJSON(value.background),
        'textColor': value.textColor,
        'cssClasses': value.cssClasses,
        'isFullWidth': value.isFullWidth,
        'isFullHeight': value.isFullHeight,
        'anchor': value.anchor,
        'horizontalAlignment': AlignmentToJSON(value.horizontalAlignment),
        'verticalAlignment': AlignmentToJSON(value.verticalAlignment),
        'paddingTop': PaddingToJSON(value.paddingTop),
        'paddingBottom': PaddingToJSON(value.paddingBottom),
    };
}

