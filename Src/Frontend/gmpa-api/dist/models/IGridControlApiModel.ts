/* tslint:disable */
/* eslint-disable */
/**
 * GMPA - API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
     HeaderViewModelFromJSONTyped,
     IGridControlApiModelFromJSONTyped,
     ParagraphViewModelFromJSONTyped,
     TagTitleViewModelFromJSONTyped
} from './';

/**
 * 
 * @export
 * @interface IGridControlApiModel
 */
export interface IGridControlApiModel {
    /**
     * 
     * @type {string}
     * @memberof IGridControlApiModel
     */
    alias: string | null;
}

/**
 * Check if a given object implements the IGridControlApiModel interface.
 */
export function instanceOfIGridControlApiModel(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "alias" in value;

    return isInstance;
}

export function IGridControlApiModelFromJSON(json: any): IGridControlApiModel {
    return IGridControlApiModelFromJSONTyped(json, false);
}

export function IGridControlApiModelFromJSONTyped(json: any, ignoreDiscriminator: boolean): IGridControlApiModel {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    if (!ignoreDiscriminator) {
        if (json['alias'] === 'header') {
            return HeaderViewModelFromJSONTyped(json, true);
        }
        if (json['alias'] === 'none') {
            return IGridControlApiModelFromJSONTyped(json, true);
        }
        if (json['alias'] === 'paragraph') {
            return ParagraphViewModelFromJSONTyped(json, true);
        }
        if (json['alias'] === 'tagTitle') {
            return TagTitleViewModelFromJSONTyped(json, true);
        }
    }
    return {
        
        'alias': json['alias'],
    };
}

export function IGridControlApiModelToJSON(value?: IGridControlApiModel | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'alias': value.alias,
    };
}

