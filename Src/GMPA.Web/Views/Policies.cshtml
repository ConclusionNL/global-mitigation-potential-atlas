@model GMPA.Core.Models.ViewModels.PoliciesViewModel
@{
    Layout = "Main.cshtml";
    Model.PageTitle = "National policies";
}

<a href="javascript:history.back()">← Return to previous page</a>
<h1 class="d-flex justify-content-center">@Model.PageTitle</h1>

<div class="row">
    <div class="col-1">
        <div class="container text-center justify-content-center">
            <label for="pilotCountryFilter">Select a country:</label>
            <select class="side-width" name="pilotCountryFilter" id="pilotCountryFilter">
                <option value=""></option>
                @foreach (var country in Model.Countries
                    .Where(a => a.Active))
                {
                    <option value="@country.Name">@country.Name</option>
                }
            </select>
        </div>
        <div class="container text-center mt-3">
            <div class="row">
                <div class="col">
                    <button class="btn btn-primary toggle-container side-width" id="btnStrategy" data-target="ClimateStrategy">Climate Strategies</button>
                    <button class="btn btn-primary toggle-container side-width" id="btnInventory" data-target="PolicyInventory">Policy Inventory</button>
                </div>
            </div>
        </div>
        <div class="container text-center justify-content-center hidden" id="sectorFilter">
            <label for="filterSector">Filter by Sector:</label>
            <select name="filterSector" id="filterSector" class="sector-dropdown side-width">
                <option value=""></option>
                <option value="Energy">Energy</option>
                <option value="Transport">Transport</option>
                <option value="Industry">Industry</option>
            </select>
        </div>
    </div>

    <div class="col-11">
        <div class="toggle-content" id="ClimateStrategy">
            @{
                <h2>Climate Strategies</h2>
                @foreach (var strategy in Model.ClimateStrategiesBlockList)
                {
                    <div class="card md-3 strategy-item" data-from-country="@strategy.FromCountry">

                        <div class="card-header">
                            <h3>@strategy.FromCountry: @strategy.PolicyDocumentName</h3>
                        </div>
                        <div class="card-body">
                            <h5>Key Objectives/Targets</h5>
                            @Html.Raw(strategy.KeyObjectivesTargets)
                        </div>

                        <div class="d-flex justify-content-between card-footer">
                            <div class="p-2">
                                <h5>Start Year</h5>
                                @strategy.StartYear
                            </div>
                            <div class="p-2">
                                <h5>Valid till</h5>
                                @strategy.EndYear
                            </div>
                            <div class="ms-auto p-2">
                                <h5>Source</h5>
                                @{
                                    var sourceNumber = 1;
                                }

                                @foreach (var sourceItem in strategy.SourceLink)
                                {
                                    <div>
                                        <a href="@sourceItem">Source @sourceNumber of @strategy.PolicyDocumentName</a>
                                    </div>
                                    sourceNumber++;
                                }
                            </div>
                        </div>
                    </div>
                }
            }
        </div>

        <div class="hidden toggle-content" id="PolicyInventory">
            @{

                <h2>Policy Inventory</h2>
                @foreach (var policy in Model.PolicyInventoryBlockList)
                {
                    <div class="card policy-item" data-from-country="@policy.FromCountry" data-sector="@policy.Sector">
                        <div class="row">
                            <div class="card-header">
                                <h3>@policy.FromCountry: @policy.PolicyDocumentName</h3>
                                <div class="d-flex">
                                    <h5>Sector: </h5>
                                    @policy.Sector
                                </div>
                                <div class="d-flex">
                                    <h5>Sub-sector: </h5>
                                    @policy.SubSector
                                </div>
                            </div>
                            <div class="card-body">
                                @Html.Raw(policy.Objectives)
                            </div>
                        </div>
                        <div class="d-flex card-footer justify-content-between">
                            <div class="col-1">
                                <h5>Start Year</h5>
                                @policy.StartDate
                            </div>
                            <div class="col-1">
                                <h5>Valid till</h5>
                                @if (@policy.EndDate == "0")
                                {
                                    <p>Ongoing</p>
                                }
                                else
                                {
                                    @policy.EndDate
                                }
                            </div>
                            <div class="col-1">
                                <h5>Policy Level</h5>
                                @policy.PolicyLevel
                            </div>
                            <div class="col-1">
                                <h5>Policy Origin</h5>
                                @policy.PolicyOrigin
                            </div>
                            <div class="col-1">
                                <h5>Policy Instruments</h5>
                                @policy.PolicyInstruments
                            </div>
                            <div class="col-3">
                                <h5>Source</h5>
                                @{
                                    var sourceNumber = 1;
                                }

                                @foreach (var sourceItem in policy.SourceLink)
                                {
                                    <div>
                                        <a href="@sourceItem">Source @sourceNumber of @policy.PolicyDocumentName</a>
                                    </div>
                                    sourceNumber++;
                                }
                            </div>
                        </div>
                    </div>
                }
            }
        </div>
    </div>
</div>

<script>
    var toggleButtons = document.querySelectorAll('.toggle-container');
    var strategyItems = document.querySelectorAll('.strategy-item');
    var policyItems = document.querySelectorAll('.policy-item');
    var countryDropdown = document.getElementById('pilotCountryFilter');
    var sectorDropdown = document.getElementById('filterSector');

    function filterPolicies() {
        var selectedCountry = countryDropdown.value;
        var selectedSector = sectorDropdown.value;

        strategyItems.forEach(function (item) {
            var country = item.dataset.fromCountry;
            item.classList.toggle('hidden', selectedCountry !== '' && country !== selectedCountry);
        });

        policyItems.forEach(function (item) {
            var country = item.dataset.fromCountry;
            var sector = item.dataset.sector;
            var itemElement = item.closest('.policy-item');

            if ((selectedCountry === '' || country === selectedCountry) &&
                (selectedSector === '' || sector === selectedSector)) {
                itemElement.classList.remove('hidden');
            } else {
                itemElement.classList.add('hidden');
            }
        });

        updateUrlParams();
    }

    countryDropdown.addEventListener('change', filterPolicies);
    sectorDropdown.addEventListener('change', filterPolicies);

    function initializeContent() {
        var paramName = 'country';
        var selectedCountry = getQueryParam(paramName);
        var selectedSector = getQueryParam('sector');

        if (selectedCountry !== null) {
            countryDropdown.value = selectedCountry;
            sectorDropdown.value = selectedSector || ''; // Set selected sector if present in URL
            filterPolicies();
        }

        // Set the sector dropdown value if the sector parameter is present in the URL
        if (selectedSector !== null) {
            sectorDropdown.value = selectedSector;
        }
    }

    initializeContent();

    toggleButtons.forEach(button => {
        button.addEventListener('click', function () {
            var targetId = this.getAttribute('data-target');
            var targetElement = document.getElementById(targetId);
            var sectorFilterContainer = document.getElementById('sectorFilter');
            var selectedSector = sectorDropdown.value; // Retrieve the selected sector here

            document.querySelectorAll('.toggle-content').forEach(container => {
                container.classList.add('hidden');
            });

            sectorFilterContainer.classList.add('hidden');

            targetElement.classList.remove('hidden');

            if (targetId === 'PolicyInventory') {
                sectorDropdown.value = selectedSector; // Set the selected sector
                sectorFilterContainer.classList.remove('hidden');
            }
        });
    });

    function updateUrlParams() {
        var baseUrl = window.location.origin + window.location.pathname;
        var updatedUrl = new URL(baseUrl);

        updatedUrl.searchParams.set('country', countryDropdown.value);
        updatedUrl.searchParams.set('sector', sectorDropdown.value);

        window.history.replaceState(null, null, updatedUrl);
    }

    function getQueryParam(name) {
        var urlParams = new URLSearchParams(window.location.search);
        return urlParams.get(name);
    }
</script>


<style>
    .divider {
        border-bottom: 1px solid #000000;
        margin-block: 10px;
    }

    h5 {
        margin-right: 5px;
    }

    .hidden {
        display: none;
    }

    .card {
        margin-bottom: 10px
    }

    .side-width {
        width: calc(100% + 30px); /* Adjust the width as per your requirement */
        margin-left: -15px; /* Adjust negative margin to offset the width increase */
    }
</style>